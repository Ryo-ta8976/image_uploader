{"version":3,"sources":["component/ImageUploadBox.jsx","component/Result.jsx","component/Uploading.jsx","component/Upload.jsx","App.js","serviceWorker.js","index.js","assets/image/image.svg"],"names":["ImageUploadBox","props","addToast","useToasts","property","onDrop","useCallback","acceptedFiles","forEach","file","params","FormData","append","axios","post","headers","then","res","reader","FileReader","onloadend","setUploadedImage","result","readAsDataURL","setUrl","data","setResult","setStatus","catch","appearance","autoDismiss","useDropzone","getRootProps","getInputProps","Box","bg","overflow","borderWidth","borderRadius","w","mx","mt","h","boxShadow","Text","fontSize","textAlign","color","className","border","borderColor","borderStyle","paddingTop","paddingBottom","Image","src","image","alt","Upload","py","CheckCircle","my","uploadedImage","size","defaultValue","url","text","onCopy","onClick","px","isIndeterminate","useState","status","Result","Uploading","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"yUAOe,SAASA,EAAeC,GAAQ,IACrCC,EAAaC,sBAAbD,SACFE,EAKG,oBALHA,EAMM,+BAMNC,EAASC,uBAAY,SAACC,GAC1BA,EAAcC,SAAQ,SAACC,GACnB,IAAMC,EAAS,IAAIC,SACdF,IACLC,EAAOE,OAAO,QAASH,GAEvBI,IAAMC,KAAN,gBAA4BJ,EAAQ,CAAEK,QAAS,CAAE,eAAgB,yBAC9DC,MAAK,SAACC,GACL,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjBnB,EAAMoB,iBAAiBH,EAAOI,SAEhCJ,EAAOK,cAAcd,GACrBR,EAAMuB,OAAOP,EAAIQ,MACjBxB,EAAMyB,WAAU,GAChBzB,EAAM0B,WAAU,MAEnBC,OAAM,kBAAM1B,EAAS,mGAAoB,CACxC2B,WAAY,QACZC,aAAa,aAIlB,CAAC5B,EAAUD,IArC8B,EAuCS8B,YAAY,CAAC1B,WAA5C2B,GAvCsB,EAuCrCzB,cAvCqC,EAuCtByB,cAAcC,EAvCQ,EAuCRA,cAEpC,OACE,kBAACC,EAAA,EAAD,CACEC,GAAG,QACHC,SAAS,SACTC,YAAY,MACZC,aAAa,KACbC,EAAE,MACFC,GAAG,OACHC,GAAG,OACHC,EAAE,QACFC,UAAU,MAEV,kBAACT,EAAA,EAAD,CAAKO,GAAG,QACN,kBAACG,EAAA,EAAD,CAAMC,SAAS,MAAMC,UAAU,UAC5B1C,GAEH,kBAACwC,EAAA,EAAD,CAAOG,MAAM,WAAWD,UAAU,SAASD,SAAS,MACjDzC,IAIL,kBAAC8B,EAAA,EAAD,CAAKQ,EAAE,MAAMH,EAAE,OAAOS,UAAU,aAC9B,wBAAShB,EAAa,CAACgB,UAAW,aAChC,0BAAWf,KACX,kBAACC,EAAA,EAAD,CAAKK,EAAE,MAAMJ,GAAG,UAAUc,OAAO,MAAMC,YAAY,WAAWZ,aAAa,KAAKa,YAAY,SAASV,GAAG,OAAOD,GAAG,OAAOY,WAAW,OAAOC,cAAc,QACvJ,kBAACC,EAAA,EAAD,CAAOnB,GAAG,OAAOK,GAAG,OAAOe,IAAKC,IAAOC,IAAI,gBAC3C,kBAACvB,EAAA,EAAD,CAAKO,GAAG,QACN,kBAACG,EAAA,EAAD,CAAME,UAAU,UAAhB,0BACA,kBAACF,EAAA,EAAD,CAAME,UAAU,UAAhB,sB,kEClCCY,MAnCf,SAAiBzD,GAAQ,IACbC,EAAaC,sBAAbD,SAER,OACI,kBAAC,IAAD,CACIiC,GAAG,QACHC,SAAS,SACTC,YAAY,MACZC,aAAa,KACbC,EAAE,MACFC,GAAG,OACHC,GAAG,OACHC,EAAE,QACFC,UAAU,KACVG,UAAU,SACVa,GAAG,QAEH,kBAACC,EAAA,EAAD,CAAiBrB,EAAG,EAAGG,EAAG,EAAGK,MAAM,cACnC,kBAAC,IAAD,CAAMD,UAAU,SAASe,GAAG,QAA5B,0BACA,kBAAC,IAAD,CAAOrB,GAAG,OAAOF,aAAa,KAAKC,EAAE,KAAKgB,IAAKtD,EAAM6D,cAAeL,IAAI,gBACxE,kBAAC,IAAD,CAAKI,GAAG,QACJ,kBAAC,IAAD,CAAOtB,EAAE,MAAMwB,KAAK,KAAKF,GAAG,OAAOG,aAAc/D,EAAMgE,MACvD,kBAAC,kBAAD,CAAiBC,KAAMjE,EAAMgE,IACzBE,OAAQ,kBAAMjE,EAAS,6FAAmB,CAC1C2B,WAAY,UACZC,aAAa,MAEb,kBAAC,IAAD,CAAQiC,KAAK,KAAK5B,GAAG,WAArB,SAEJ,kBAAC,IAAD,CAAQiC,QAAS,kBAAMnE,EAAMyB,WAAU,KAAvC,6D,SCZDgC,MApBf,WACE,OACE,kBAAC,IAAD,CACIvB,GAAG,QACHC,SAAS,SACTC,YAAY,MACZC,aAAa,KACbC,EAAE,MACFC,GAAG,OACH6B,GAAG,OACH5B,GAAG,OACHC,EAAE,QACFC,UAAU,MAVd,eAaI,kBAAC,IAAD,CAAUoB,KAAK,KAAKO,iBAAe,MCe5BZ,MA3Bf,WAAoB,IAAD,EACWa,oBAAS,GADpB,mBACVC,EADU,KACF7C,EADE,OAEW4C,oBAAS,GAFpB,mBAEVjD,EAFU,KAEFI,EAFE,OAGK6C,mBAAS,MAHd,mBAGVN,EAHU,KAGLzC,EAHK,OAIyB+C,mBAAS,MAJlC,mBAIVT,EAJU,KAIKzC,EAJL,KAMjB,OAAGC,EACM,kBAACmD,EAAD,CAAQX,cAAeA,EAAeG,IAAKA,EAAKvC,UAAWA,IAGhE,kBAAC,IAAD,CAAKa,EAAE,OAAOG,EAAE,OACb8B,GAAU,kBAACE,EAAD,OACTF,GACA,6BACE,kBAACxE,EAAD,CACEwB,OAAQA,EACRE,UAAWA,EACXC,UAAWA,EACXN,iBAAkBA,O,SCJjBsD,MAdf,WACE,OACE,6BACE,gCACE,kBAAC,gBAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,WCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEdhE,OAAM,SAAAiE,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.7f09689c.chunk.js","sourcesContent":["import React, {useCallback} from 'react';\nimport { Box, Image, Text } from \"@chakra-ui/core\";\nimport { useDropzone } from \"react-dropzone\";\nimport image from \"../assets/image/image.svg\";\nimport axios from \"axios\";\nimport { useToasts } from 'react-toast-notifications'\n\nexport default function ImageUploadBox(props) {\n  const { addToast } = useToasts();\n  const property = {\n    imageUrl: \"https://bit.ly/2Z4KKcF\",\n    imageAlt: \"Rear view of modern home with pool\",\n    beds: 3,\n    baths: 2,\n    title: \"Upload your image\",\n    sentence: \"File should be Jpeg, Png,...\",\n    formattedPrice: \"$1,900.00\",\n    reviewCount: 34,\n    rating: 4,\n\n  };\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n        const params = new FormData();\n        if (!file) return;\n        params.append(\"image\", file);\n\n        axios.post(`/upload_image`, params, { headers: { 'Content-Type': 'multipart/form-data' } })\n          .then((res) => {\n            let reader = new FileReader();\n            reader.onloadend = () => {\n              props.setUploadedImage(reader.result);\n            }\n            reader.readAsDataURL(file);\n            props.setUrl(res.data);\n            props.setResult(true);\n            props.setStatus(false);\n        })\n        .catch(() => addToast('画像のアップロードに失敗しました', {\n          appearance: 'error',\n          autoDismiss: true,\n        }));\n        return;\n    })\n  }, [addToast, props]);\n\n  const {acceptedFiles, getRootProps, getInputProps} = useDropzone({onDrop});\n\n  return (\n    <Box\n      bg=\"white\"\n      overflow=\"hidden\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      w=\"40%\"\n      mx=\"auto\"\n      mt=\"50px\"\n      h=\"500px\"\n      boxShadow=\"lg\"\n    >\n      <Box mt=\"20px\">\n        <Text fontSize=\"2xl\" textAlign=\"center\">\n          {property.title}\n        </Text>\n        <Text  color=\"gray.500\" textAlign=\"center\" fontSize=\"md\">\n          {property.sentence}\n        </Text>\n      </Box>\n\n      <Box h=\"80%\" w=\"100%\" className=\"container\">\n        <div {...getRootProps({className: 'dropzone'})}>\n          <input {...getInputProps()} />\n          <Box w=\"80%\"　bg=\"blue.50\" border=\"2px\" borderColor=\"blue.200\" borderRadius=\"lg\"　borderStyle=\"dotted\" mt=\"40px\" mx=\"auto\" paddingTop=\"20px\" paddingBottom=\"20px\">\n            <Image bg=\"blue\" mx=\"auto\" src={image} alt=\"description\"/>\n            <Box mt=\"10px\">\n              <Text textAlign=\"center\">Drag & Drop your image</Text>\n              <Text textAlign=\"center\">or Click here</Text>\n            </Box>\n          </Box>\n        </div>\n      </Box>\n    </Box>\n  );\n}","import React from \"react\";\nimport { Button, Box, Input, Image, Text } from \"@chakra-ui/react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { useToasts } from 'react-toast-notifications'\nimport { CheckCircleIcon } from '@chakra-ui/icons'\n\n\nfunction Upload (props) {\n    const { addToast } = useToasts();\n\n    return (\n        <Box\n            bg=\"white\"\n            overflow=\"hidden\"\n            borderWidth=\"1px\"\n            borderRadius=\"lg\"\n            w=\"40%\"\n            mx=\"auto\"\n            mt=\"50px\"\n            h=\"500px\"\n            boxShadow=\"lg\"\n            textAlign=\"center\"\n            py=\"20px\"\n        >\n            <CheckCircleIcon w={8} h={8} color=\"green.500\" />\n            <Text textAlign=\"center\" my=\"10px\">Uploaded Successfully!</Text>\n            <Image mx=\"auto\" borderRadius=\"lg\" w=\"sm\" src={props.uploadedImage} alt='description' />\n            <Box my=\"20px\">\n                <Input w=\"70%\" size=\"sm\" my=\"10px\" defaultValue={props.url}></Input>\n                <CopyToClipboard text={props.url}\n                    onCopy={() => addToast('クリップボードにコピーしました', {\n                    appearance: 'success',\n                    autoDismiss: true,\n                    })}>\n                    <Button size=\"sm\" bg=\"skyblue\">copy</Button>\n                </CopyToClipboard>\n                <Button onClick={() => props.setResult(false)}>アップロードに戻る</Button>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Upload","import React from \"react\";\nimport { Progress, Box } from \"@chakra-ui/react\"\n\n\nfunction Upload () {\n  return(\n    <Box\n        bg=\"white\"\n        overflow=\"hidden\"\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        w=\"40%\"\n        mx=\"auto\"\n        px=\"10px\"\n        mt=\"50px\"\n        h=\"500px\"\n        boxShadow=\"lg\"\n    >\n        Uploading...\n        <Progress size=\"md\" isIndeterminate/>\n    </Box>\n  )\n}\n\nexport default Upload","import React, { useState } from \"react\";\nimport ImageUploadBox from \"./ImageUploadBox\";\nimport { Box } from \"@chakra-ui/react\"\nimport Result from \"./Result\";\nimport Uploading from \"./Uploading\";\n\n\nfunction Upload () {\n  const [status, setStatus] = useState(false);\n  const [result, setResult] = useState(false);\n  const [url, setUrl] = useState(null);\n  const [uploadedImage, setUploadedImage] = useState(null);\n\n  if(result){\n    return <Result uploadedImage={uploadedImage} url={url} setResult={setResult} />\n  }else{\n    return (\n      <Box w=\"100%\" h=\"80%\">\n        {status && <Uploading />}\n        {!status &&\n          <div>\n            <ImageUploadBox\n              setUrl={setUrl}\n              setResult={setResult}\n              setStatus={setStatus}\n              setUploadedImage={setUploadedImage}\n            />\n          </div>\n        }\n      </Box>\n    );\n  }\n}\n\nexport default Upload","import React from \"react\";\nimport \"./App.css\";\nimport Upload from \"./component/Upload\"\nimport { ToastProvider } from 'react-toast-notifications'\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n\nfunction App () {\n  return (\n    <div>\n      <header>\n        <ToastProvider>\n          <ChakraProvider>\n            <Upload />\n          </ChakraProvider>\n        </ToastProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core'\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <ChakraProvider>\n        <App/>\n      </ChakraProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.3956556f.svg\";"],"sourceRoot":""}